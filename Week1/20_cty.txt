bool threeConsecutiveOdds(int* arr, int arrSize){
 int n=0;
 for (int j = 0; j < arrSize; j++)
 {
    if (arr[j] % 2 == 1)
    {
        n++;
    }
    else
        n = 0;
    if (n == 3)
    { 
           return true;
    }
}
return false;
}






int sumOddLengthSubarrays(int* arr, int arrSize){
    int i=0;
    int n=0;
    int m;
    int x;
    int z;
    int q;
    if(arrSize%2==1)
            z=arrSize;
         else
            z=arrSize-1;
    for(m=0;m<arrSize;m++)
    {
        q=z;
        while(q>0)
        {
            while(m+q>arrSize)
                q-=2;
            for(x=m;x<m+q;x++)
            {
                n+=arr[x];
            }
            q-=2;
        }
    }
    printf("%d",n);
    return n;
}






int minimumTotal(int** triangle, int triangleSize, int* triangleColSize){
    int dp[triangleSize][triangleSize+1];
    int i,j;
    int n;
     for(i=0;i<triangleSize;i++)
        {
            for(j=0;j<triangleSize+1;j++)
            {
                dp[i][j]=1000;
            }
        }
    dp[0][1]=triangle[0][0];
    if(triangleSize>1)
    {
        for(i=1;i<triangleSize;i++)
        {
            for(j=1;j<triangleColSize[i]+1;j++)
            {
                if(dp[i-1][j-1]<dp[i-1][j])
                {
                    dp[i][j]=dp[i-1][j-1]+triangle[i][j-1];
                }
                else
                {
                    dp[i][j]=dp[i-1][j]+triangle[i][j-1];
                }
            }
        }
    }
    n=dp[triangleSize-1][0];
    for(i=1;i<triangleSize+1;i++)
    {
        if(n>dp[triangleSize-1][i])
            n=dp[triangleSize-1][i];
    }
    return n;
}


